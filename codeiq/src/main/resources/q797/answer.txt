※これは解答用サンプルファイルです。

■「CSVファイル名」と「島の固まり」の数をカンマ区切りで書いてください。
「CSVファイル名」と「島の固まり」は1セットとし、1行に1セットずつ改行して書いてください。

AegeanSea1.csv,3
AegeanSea2.csv,28
AegeanSea3.csv,64


■あなたが書いたコードの内容や工夫した点について簡潔に説明してください。こちらも評価対象となります。

・Java8 API使い倒す
・ロジックが複雑なので、手続き的ではなく、可読性を重視してDomainModelで構成

■あなたが書いたJavaのバージョンを教えてください。

・Javaのバージョンは1.8.0
・Eclipse 4.3でJava8コンパイル用のプラグイン使用（http://download.eclipse.org/eclipse/updates/4.3-P-builds/）
・Mac OS X 10.9.2
・文字コードはShift_JIS
・改行コードはLF

■あなたが書いたコードそのものを貼り付けてください。

codeiq用に作ったgithubのレポジトリにアップしています。
入力ファイルなどもそのまま配置しているのでmvn eclipse:eclipse実行後にmainを実行すればそのまま実行できます。

https://github.com/yoshidan001/sample/tree/master/codeiq/src/main/java/codeiq/q797

一応はりつけておきます。

public class Q797{
	
	private static final Charset CHARSET = Charset.forName("Shift_JIS");
	
	private static final Path[] INPUT_FILE = 
			new Path[]{
					Paths.get("src/main/resources/q797/AegeanSea1.csv")
				,	Paths.get("src/main/resources/q797/AegeanSea2.csv")	
				,	Paths.get("src/main/resources/q797/AegeanSea3.csv")
	};
	
	/**
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException{
		for(Path p : INPUT_FILE){
			execute(p);
		}
	}	

	/**
	 * 地図の右下方向に捜索していく
	 * @param inputFile ファイル
	 */
	private static void execute(Path inputFile) throws IOException{
		
		//地図読み取り
		List<List<Integer>> rowData = Files.readAllLines(inputFile,CHARSET).stream().map(s -> {
			return Arrays.asList(s.split(",")).stream().map(d -> Integer.parseInt(d)).collect(Collectors.toList());
		}).collect(Collectors.toList());;
		
		BitMap map = new BitMap(rowData);
		GroupManager manager = new GroupManager();
		
		//ビットが立っているもののみ実行
		map.forEachOn(current->{
			
			//自分が所属するグループを取得する
			Group currentGroup = manager.findOrCreateGroup(current);					
				
			//下方向の捜索
			if(current.under().isOn()){	
				//現在グループに所属させる
				currentGroup.join(current.under());			
			}
			
			//右方向の捜索と現在グループとの関連づけ
			if(current.right().isOn()){

				Position right = current.right();
				
				//右側は既に別のグループに所属している可能性がある
				if(manager.isJoinedOtherGroup(right)){
					//既存のグループに自分が現在所属するグループを合成する
					manager.mergeGroup(right,currentGroup);
				}else{
					//現在グループに所属させる
					currentGroup.join(right);
				}
			}				
		});
		//結果表示
		manager.show();
	}
}

public class BitMap {

	private List<List<Integer>> map = new ArrayList<>();
	
	public BitMap(List<List<Integer>> map) {
		this.map = map;
	}
	
	/**
	 * フラグが立っている箇所だけ処理 .
	 * @param consumer
	 */
	public void forEachOn(Consumer<Position> consumer){
		for(int y = 0; y < map.size(); y++){
			List<Integer> xList = map.get(y);
			for(int x = 0; x < xList.size(); x++){
				Position position = new Position(y,x);
				if(position.isOn()){
					consumer.accept(position);
				}
			}
		}
	}

	/**
	 * 地図上での位置
	 */
	public class Position{
		
		private int x;
		private int y;
		
		public Position(int y, int x){
			this.x = x;
			this.y = y;
		}
		
		public Position right() {
			return new Position(y,x+1);
		}
		
		public Position under(){
			return new Position(y+1,x);
		}
		
		public boolean isOn(){
			return y == map.size() || x == map.get(y).size() ? false :  map.get(y).get(x) == 1;
		}
		
		@Override
		public String toString(){
			return String.join(",",String.valueOf(y),String.valueOf(x));
		}
	}
}

public class GroupManager {

	/** グループ情報 */
	private List<Set<Position>> data = new ArrayList<>();
	
	/** 高速化用のインデックス（メンバ一覧）　*/
	private Map<String,Integer> index = new HashMap<String,Integer>();
	
	/**
	 * 結果表示
	 */
	public void show(){
		List<Integer> pointers = index.values().stream().distinct().collect(Collectors.toList());		
		System.out.println("count = " + pointers.size() + " 座標の左上は[0,0]");
		pointers.forEach(i->System.out.println(data.get(i)));
	}
	
	/**
	 * 所属グループを検索する。なければ新規グループを作成する。
	 * @param key
	 * @return
	 */
	public Group findOrCreateGroup(Position key){
		//インデックス検索
		Integer pointer = index.get(key.toString());

		//新規であればインデックス作成
		Set<Position> positionList = null;
		if(pointer == null){			
			positionList = new HashSet<>();
			positionList.add(key);						
			data.add(positionList);				
			pointer = data.size() - 1;
			index.put(key.toString(),pointer);								
		}else{
			positionList = data.get(pointer);
		}						
		Group group  = new Group();
		group.pointer = pointer;
		group.data = positionList;
		return group;
	}
	
	/**
	 * 別グループに所属しているかいなか
	 * @param key
	 * @return
	 */
	public boolean isJoinedOtherGroup(Position key){
		return index.containsKey(key.toString());
	}
	
	/**
	 * 既存グループと対象グループを合体させる
	 * @param key
	 * @param current
	 */
	public void mergeGroup(Position key,Group current){			
		
		current.data.add(key);
		
		//合成する
		int pointer = index.get(key.toString());
		
		Set<Position> src = current.data;
		Set<Position> dst = data.get(pointer);			
		dst.addAll(src);	
		
		//合成した元ネタはインデックス最作成
		for(Position e : src){
			index.put(e.toString(),pointer);
		}
	}	
	
	/**
	 * グループ
	 */
	public class Group {
		private Integer pointer;
		private Set<Position> data;
		
		/**
		 * 参加する
		 * @param position
		 * @return
		 */
		public void join(Position position){
			this.data.add(position);
			index.put(position.toString(), pointer);
		}
	}
	
}



