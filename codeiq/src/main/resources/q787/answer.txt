1. 動作環境

・Javaのバージョンは1.8.0
・Eclipse 4.3でJava8コンパイル用のプラグイン使用（http://download.eclipse.org/eclipse/updates/4.3-P-builds/）
・Mac OS X 10.9.2
・文字コードはShift_JIS
・改行コードはLF

2. プログラムの特長・工夫した点等、アピールポイント

・Java8 API使い倒す
・順位計算は各科目ごとに独立しているので並列処理
・Javaでは使用できないクロージャを、配列変数を使用して擬似的に作成して、ランキング生成関数を作成

3. ソースコードのテキスト

codeiq用に作ったgithubのレポジトリにアップしています。
入力ファイルなどもそのまま配置しているのでmvn eclipse:eclipse実行後にmainを実行すればそのまま実行できます。

https://github.com/yoshidan001/sample/tree/master/codeiq/src/main/java/codeiq/q787

一応はりつけておきます。

public class Q787 {
	
	private static final Charset CHARSET = Charset.forName("Shift_JIS");
	
	private static final Path INPUT_FILE = Paths.get("src/main/resources/q787/class_3c_input.csv");

	/**
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException{
		
		//合計計算用の疑似クロージャ
		Function<String,IndexList<String>> sum = sum();
	
		//縦横変換（科目単位に分割する）
		IndexList<List<String>> dataList = new IndexList<>();
		try(Stream<String> stream = Files.lines(INPUT_FILE,CHARSET)){
			stream.forEach(s->{
				sum.apply(s).forEachWithIndex((e,i)-> {
					List<String> subject = dataList.size() <= i ? dataList.append(new ArrayList<>()) : dataList.get(i);				
					subject.add(e);				
				});		
			});
		}
		
		//順位付け(科目ごとに独立なので並列処理可能）
		dataList.parallelStream().skip(1).forEach(i->{
			
			//順位保持用の疑似クロージャ
			Function<String,String> rank = rank();
	
			Map<String,String> array = i.stream().skip(1)
				.sorted((p,a)-> atoi(a) - atoi(p))
					.map(s->Arrays.asList(s,rank.apply(s)))
						.distinct()
							.collect(Collectors.toMap((k)->k.get(0), (v)->v.get(1)));	
			//点数を順位に置換
			i.replaceAll(s->array.containsKey(s) ? array.get(s) : s);
		});
		
		//縦横変換（書き込み単位に戻す）
		IndexList<StringBuilder> writeList = new IndexList<>();
		dataList.forEach(c->{
			new IndexList<String>(c).forEachWithIndex((e,i)->{;
				StringBuilder name = writeList.size() <= i ? writeList.append(new StringBuilder()) : writeList.get(i).append(",");				
				name.append(e);				
			});			
		});
						
		//ファイル出力
		Files.write(Paths.get(String.format("class_3c_output_%d.csv",System.currentTimeMillis())),writeList,CHARSET);
	}
	
	/**
	 * 文字列 to 数値
	 * @param value
	 * @return
	 */
	private static int atoi(String value){
		return Integer.parseInt(value);
	}
	
	/**
	 * 合計表示表の高階関数
	 * @return
	 */
	private static Function<String,IndexList<String>> sum(){
		boolean[] first = new boolean[]{true};
		return (String s) -> {
			IndexList<String> arrayList = new IndexList<>(Arrays.asList(s.split(",")));				
			if(first[0]){
				first[0] = false;
				arrayList.add("合計");
			}else{
				int sum = arrayList.subList(1,arrayList.size())
							.stream()
								.mapToInt(v->atoi(v))
									.sum();
				arrayList.add(String.valueOf(sum));
			}
			return arrayList;
		};		
	}
	
	/**
	 * ランキング表示用の高階関数
	 * @return
	 */
	private static Function<String,String> rank() {
		int[] min = new int[]{-1};
		int[] count = new int[]{0};
		int[] rank = new int[]{1};		
		return (String next) -> {						
			count[0]++;
			if(min[0] > atoi(next)){
				rank[0] = count[0];
			}			
			min[0] = atoi(next);
			return String.valueOf(rank[0]);
		};
	}
}